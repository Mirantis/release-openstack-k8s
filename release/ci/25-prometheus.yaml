---
apiVersion: v1
kind: Namespace
metadata:
  name: stacklight
---
apiVersion: lcm.mirantis.com/v1alpha1
kind: HelmBundle
metadata:
  name: prometheus
  namespace: stacklight
spec:
  releases:
  - name: prometheus
    helmV3: true
    chartURL: https://binary.mirantis.com/stacklight/helm/prometheus-8.11.4-mcp-240.tgz
    version: 8.11.4-mcp-240
    namespace: stacklight
    values:
      alertmanager:
        enabled: false
      configmapReload:
        image:
          repository: mirantis.azurecr.io/stacklight/configmap-reload
          tag: v0.8.0
      httpProxyDiscovery:
        checksum: null
        enabled: false
        secretName: cc-proxy
        ssl: false
      initChownData:
        image:
          repository: mirantis.azurecr.io/stacklight/alpine-utils
          tag: 1-20230714023021
      kubeStateMetrics:
        enabled: false
      nodeExporter:
        enabled: false
      pushgateway:
        enabled: false
      relay:
        enabled: false
      server:
        extraArgs:
          enable-feature: auto-gomaxprocs,memory-snapshot-on-shutdown
          query.max-concurrency: 20
          rules.alert.resend-delay: 2m
          storage.tsdb.path: /data
          storage.tsdb.retention.size: 15GB
          storage.tsdb.retention.time: 15d
        global:
          scrape_interval: 15s
          scrape_timeout: 10s
        image:
          repository: mirantis.azurecr.io/stacklight/prometheus
          tag: v2.44.0
        nodeSelector:
          # deploy prometheus on dedicated tempest node present
          # on all virtual environments
          tempest: enabled
        persistentVolume:
          enabled: true
          mountPath: /data
          size: 16Gi
          storageClass: lvp-fake-root
        replicaCount: 1
        resources:
          limits:
            cpu: 1000m
            memory: 8Gi
          requests:
            cpu: 500m
            memory: 2Gi
        service:
          type: LoadBalancer
      serverFiles:
        prometheus.yml:
          scrape_configs:
            openstack-cloudprober:
              honor_timestamps: true
              kubernetes_sd_configs:
              - namespaces:
                  names:
                  - openstack
                role: endpoints
              metric_relabel_configs:
              - action: keep
                regex: cloudprober_success|cloudprober_total
                source_labels:
                - __name__
              metrics_path: /metrics
              relabel_configs:
              - action: keep
                regex: cloudprober;cloudprober
                source_labels:
                - __meta_kubernetes_service_name
                - __meta_kubernetes_endpoint_port_name
              scheme: http
              scrape_interval: 15s
              scrape_timeout: 10s
            openstack-neutron-portprober:
              honor_timestamps: true
              kubernetes_sd_configs:
              - namespaces:
                  names:
                  - openstack
                role: endpoints
              metric_relabel_configs:
              - action: labeldrop
                regex: node
              - action: keep
                regex: portprober_arping_target_total|portprober_arping_target_success|portprober_arping_target_failure
                source_labels:
                - __name__
              metrics_path: /
              relabel_configs:
              - action: keep
                regex: neutron-portprober-exporter;qpp-exporter
                source_labels:
                - __meta_kubernetes_service_name
                - __meta_kubernetes_endpoint_port_name
              - source_labels:
                - __meta_kubernetes_pod_node_name
                target_label: node
              scheme: http
              scrape_interval: 15s
              scrape_timeout: 10s
  # Deploy grafana together with prometheus, to make the same setup
  # as used on bm environments to measure workload downtimes. Grafana
  # is deployed without dashboards to decrease memory usage (sidecar
  # containers disabled)
  - name: grafana
    chartURL: https://binary.mirantis.com/stacklight/helm/grafana-3.3.10-mcp-278.tgz
    helmV3: true
    namespace: stacklight
    values:
      adminPassword: admin
      deploymentStrategy:
        rollingUpdate:
          maxUnavailable: 0
        type: RollingUpdate
      enableOpensearchDashboardsLinks: true
      grafana.ini:
        auth:
          disable_login_form: true
        auth.anonymous:
          enabled: true
          org_role: Admin
        dashboards:
          default_home_dashboard_path: /var/lib/grafana/dashboards/default/kubernetes-cluster.json
      image:
        repository: mirantis.azurecr.io/stacklight/grafana
        tag: 10.3.1
      initChownData:
        image:
          repository: mirantis.azurecr.io/stacklight/alpine-utils
          tag: 1-20240126023019
        securityContext:
          capabilities:
            drop:
            - NET_RAW
            - SYS_ADMIN
          runAsNonRoot: false
          runAsUser: 0
      networkPolicy:
        egress:
        - {}
        ingress:
        - {}
      nodeSelector:
        # deploy grafana on dedicated tempest node present
        # on all virtual environments
        tempest: enabled
      podAnnotations:
        prometheus.io/port: "3000"
        prometheus.io/scrape: "true"
      podSecurityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      rbac:
        pspUseAppArmor: false
      renderer:
        enabled: false
        image: mirantis.azurecr.io/stacklight/grafana-image-renderer:3-20231124023009
        resources:
          limits:
            cpu: 200m
            memory: 500Mi
          requests:
            cpu: 150m
            memory: 50Mi
        securityContext:
          capabilities:
            drop:
            - NET_RAW
            - SYS_ADMIN
      replicas: 1
      resources:
        limits:
          memory: 400Mi
        requests:
          cpu: 50m
          memory: 200Mi
      securityContext:
        capabilities:
          drop:
          - NET_RAW
          - SYS_ADMIN
      service:
        type: LoadBalancer
      sidecar:
        dashboards:
          enabled: false
          securityContext:
            capabilities:
              drop:
              - NET_RAW
              - SYS_ADMIN
        datasources:
          securityContext:
            capabilities:
              drop:
              - NET_RAW
              - SYS_ADMIN
        image: mirantis.azurecr.io/stacklight/k8s-sidecar:1-20240126023019
      sidecar_datasources:
        prometheus:
          isDefault: true
          type: prometheus
          url: http://prometheus-server
