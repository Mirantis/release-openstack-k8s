apiVersion: operator.tf.mirantis.com/v1alpha1
kind: TFOperator
metadata:
  name: openstack-tf
  namespace: tf
spec:
  settings:
    orchestrator: openstack
    osSharedNamespace: openstack-tf-shared
    osSecret: tf-data
    tfImage:
      tfImageRegistry: docker-kaas-local.artifactory.mirantis.com
      tfImagePath: tungsten
      tfImageTag: 5.1.20200416123710

  controllers:
    tf-config:
      api:
        replicas: 1
        containers:
        - name: api
        #  Example configuration of EnvVars and Services
        #   env:
        #     - name: TF_SANDESH_SEND_RATE_LIMIT
        #       value: "100"
        #     - name: LOG_LEVEL
        #       value: "SYS_DEBUG"
        #     - name: CONFIG_API_PORT
        #       value: "8082"
        # services:
        # - metadata:
        #     name: tf-config-api
        #   spec:
        #     ports:
        #     - name: api
        #       port: 8082
      svc-monitor:
        replicas: 1
        containers:
          - name: svc-monitor
      schema:
        replicas: 1
        containers:
        - name: schema
      devicemgr:
        replicas: 1
        containers:
        - name: devicemgr

    tf-control:
      control:
        replicas: 1
        containers:
        - name: control
      dns:
        replicas: 1
        containers:
        - name: dns
        - name: named

    tf-analytics:
      api:
        replicas: 1
        containers:
        - name: api
      alarm-gen:
        replicas: 1
        containers:
        - name: alarm-gen
      collector:
        replicas: 1
        containers:
        - name: collector
      query-engine:
        replicas: 1
        containers:
        - name: query-engine
      snmp:
        replicas: 1
        containers:
        - name: snmp
      topology:
        replicas: 1
        containers:
        - name: topology

    tf-vrouter:
      agent:
        replicas: 1
        containers:
        - name: agent
          env:
            - name: VROUTER_ENCRYPTION
              value: "FALSE"
          #  There is automatic detection of default gateway ip for vrouter
          #  If you need to specify some custom gateway, use specific env variable as in example below:
          # - name: VROUTER_GATEWAY
          #   value: <SET CUSTOM GATEWAY IP FOR VROUTER>

    tf-tool:
      status:
        enabled: true
        containers:
        - name: status
      statusAggregator:
        enabled: true
        containers:
        - name: status-aggregator

    tf-webui:
      job:
        replicas: 1
        containers:
          - name: job
      web:
        replicas: 1
        containers:
          - name: web

    tf-test:
      tungsten-pytest:
        enabled: false
        dataStorageClass: lvp-fake-root
        containers:
        - name: tungsten-pytest

    cassandra:
      deployments:
        - name: tf-cassandra-config
          replicas: 1
          dataCapacity: 2Gi
          dataStorageClass: lvp-fake-root
        - name: tf-cassandra-analytics
          replicas: 1
          dataCapacity: 20Gi
          dataStorageClass: lvp-fake-root

    redis:
      deployments:
        - name: tf-redis
          replicas: 3
          dataStorageClass: lvp-fake-root

    zookeeper:
      deployments:
        - name: tf-zookeeper
          dataStorageClass: lvp-fake-root
        - name: tf-zookeeper-nal
          dataStorageClass: lvp-fake-root

    rabbitmq:
      deployments:
        - name: tf-rabbitmq
          replicas: 1
          dataStorageClass: lvp-fake-root

    kafka:
      deployments:
        - name: tf-kafka
          dataStorageClass: lvp-fake-root
